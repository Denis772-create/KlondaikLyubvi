// <auto-generated />
using System;
using KlondaikLyubvi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KlondaikLyubvi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250806052534_AddGiftIntervalAndCountToLoveCoinTransaction")]
    partial class AddGiftIntervalAndCountToLoveCoinTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("KlondaikLyubvi.Data.BucketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BucketItems");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.LoveCoinTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GiftCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("GiftEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GiftStartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGift")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StoreItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StoreItemId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("LoveCoinTransactions");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.LoveNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoveNotes");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.StoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StoreItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Расслабляющий массаж от вашего любимого человека",
                            Emoji = "💆‍♀️",
                            Name = "💆‍♀️ Массаж на 20 минут",
                            Price = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Вкусный завтрак и кофе, приготовленные с любовью",
                            Emoji = "🍳",
                            Name = "🍳 Завтрак в постель",
                            Price = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Выбор фильма, плед и объятия",
                            Emoji = "🎥",
                            Name = "🎥 Вечер фильмов",
                            Price = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Свечи, музыка и расслабление вдвоём",
                            Emoji = "🛁",
                            Name = "🛁 Совместная ванна",
                            Price = 7,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("TEXT");

                    b.Property<int>("LovePoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Денис",
                            LovePoints = 12,
                            PasswordHash = "denis",
                            UserName = "denis"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Лиза",
                            LovePoints = 12,
                            PasswordHash = "liza",
                            UserName = "liza"
                        });
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.BucketItem", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.Event", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.LoveCoinTransaction", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.StoreItem", "StoreItem")
                        .WithMany()
                        .HasForeignKey("StoreItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KlondaikLyubvi.Data.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreItem");

                    b.Navigation("ToUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.LoveNote", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.Photo", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KlondaikLyubvi.Data.StoreItem", b =>
                {
                    b.HasOne("KlondaikLyubvi.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
