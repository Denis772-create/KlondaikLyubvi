@page "/storepanel"
@inject HttpClient Http
@inject IJSRuntime JS

@code {
    class StoreItemDto {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public int Price { get; set; }
        public string Emoji { get; set; } = string.Empty;
    }
    List<StoreItemDto> MyItems = new();
    string NewName = "";
    string? NewDescription;
    int NewPrice = 1;
    string NewEmoji = "üíñ";
    int UserId = 0;
    string? Message;
    bool ShowAddModal = false;
    StoreItemDto? EditItem = null;
    string EditName = "";
    string? EditDescription;
    int EditPrice = 1;
    string EditEmoji = "üíñ";
    protected override async Task OnInitializedAsync() {
        var userIdStr = await JS.InvokeAsync<string>("blazorGetCookie", "userId");
        int.TryParse(userIdStr, out UserId);
        await LoadMyItems();
    }
    async Task LoadMyItems() {
        MyItems = await Http.GetFromJsonAsync<List<StoreItemDto>>($"/api/myitems/{UserId}") ?? new();
    }
    void OpenAddModal() {
        ShowAddModal = true;
        NewName = ""; NewDescription = null; NewPrice = 1; NewEmoji = "üíñ";
        Message = null;
    }
    void CloseAddModal() {
        ShowAddModal = false;
        Message = null;
    }
    async Task AddItem() {
        if (MyItems.Any(x => x.Emoji == NewEmoji)) {
            Message = "–î—É–±–ª–∏–∫–∞—Ç emoji!";
            return;
        }
        if (string.IsNullOrWhiteSpace(NewName) || NewPrice < 1 || string.IsNullOrWhiteSpace(NewEmoji)) {
            Message = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!";
            return;
        }
        var resp = await Http.PostAsJsonAsync("/api/storeitems", new { Name = NewName, Description = NewDescription, Price = NewPrice, Emoji = NewEmoji, UserId });
        if (resp.IsSuccessStatusCode) {
            await LoadMyItems();
            ShowAddModal = false;
            Message = null;
        } else {
            Message = "–û—à–∏–±–∫–∞!";
        }
    }
    StoreItemDto? EditItemLocal = null;
    void StartEdit(StoreItemDto item) {
        EditItemLocal = item;
        EditName = item.Name;
        EditDescription = item.Description;
        EditPrice = item.Price;
        EditEmoji = item.Emoji;
    }
    async Task SaveEdit() {
        if (EditItemLocal == null) return;
        if (MyItems.Any(x => x.Emoji == EditEmoji && x.Id != EditItemLocal.Id)) {
            Message = "–î—É–±–ª–∏–∫–∞—Ç emoji!";
            return;
        }
        var resp = await Http.PutAsJsonAsync($"/api/storeitems/{EditItemLocal.Id}", new { Name = EditName, Description = EditDescription, Price = EditPrice, Emoji = EditEmoji });
        if (resp.IsSuccessStatusCode) {
            await LoadMyItems();
            EditItemLocal = null;
        } else {
            Message = "–û—à–∏–±–∫–∞!";
        }
    }
    async Task DeleteItem(int id) {
        await Http.DeleteAsync($"/api/storeitems/{id}");
        await LoadMyItems();
    }
}

<div class="max-w-xl mx-auto bg-white/80 rounded-2xl shadow-2xl p-8 mt-10">
    <h1 class="text-2xl font-bold text-pink-700 mb-6 flex items-center gap-2"><span class="text-3xl">üõí</span> –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã</h1>
    <div class="flex justify-end mb-6">
        <button class="flex items-center gap-2 px-6 py-3 rounded-2xl bg-pink-500 hover:bg-pink-600 text-white font-bold text-lg shadow transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-pink-300" @onclick="OpenAddModal">
            <span class="text-xl">‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
        </button>
    </div>
    @if (ShowAddModal)
    {
        <div class="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
            <div class="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md text-center mx-2 sm:mx-auto">
                <h2 class="text-xl font-bold mb-4">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h2>
                <div class="flex flex-col gap-2 mb-4">
                    <input class="rounded border px-3 py-2" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" @bind="NewName" />
                    <input class="rounded border px-3 py-2" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" @bind="NewDescription" />
                    <input class="rounded border px-3 py-2" type="number" min="1" placeholder="–¶–µ–Ω–∞ (üíã)" @bind="NewPrice" />
                    <input class="rounded border px-3 py-2 w-24 mx-auto" placeholder="Emoji" @bind="NewEmoji" />
                </div>
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="text-red-500 font-bold mb-2">@Message</div>
                }
                <div class="flex gap-2 justify-center">
                    <button class="bg-pink-500 hover:bg-pink-600 text-white px-6 py-2 rounded-xl font-bold" @onclick="AddItem">–î–æ–±–∞–≤–∏—Ç—å</button>
                    <button class="bg-gray-200 px-6 py-2 rounded-xl font-bold text-gray-600" @onclick="CloseAddModal">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        </div>
    }
    <div class="space-y-4 mb-8">
        @foreach (var item in MyItems)
        {
            <div class="flex items-center gap-4 bg-pink-50 rounded-xl p-4 shadow">
                <span class="text-2xl">@item.Emoji</span>
                <div class="flex-1">
                    <div class="font-bold text-pink-700">@item.Name</div>
                    <div class="text-gray-500 text-sm">@item.Description</div>
                    <div class="text-pink-600 font-bold">@item.Price üíã</div>
                </div>
                <div class="flex flex-row gap-2 w-full sm:w-auto justify-end items-center">
                    <button class="w-12 h-12 flex items-center justify-center rounded-full bg-blue-500 hover:bg-blue-600 text-white text-2xl shadow transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-300" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" @onclick="() => StartEdit(item)">
                        ‚úèÔ∏è
                    </button>
                    <button class="w-12 h-12 flex items-center justify-center rounded-full bg-red-500 hover:bg-red-600 text-white text-2xl shadow transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-300" title="–£–¥–∞–ª–∏—Ç—å" @onclick="() => DeleteItem(item.Id)">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
            @if (EditItemLocal != null && EditItemLocal.Id == item.Id)
            {
                <div class="bg-white rounded-xl shadow p-4 mt-2 flex flex-col gap-2">
                    <input class="rounded border px-3 py-2" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ" @bind="EditName" />
                    <input class="rounded border px-3 py-2" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" @bind="EditDescription" />
                    <input class="rounded border px-3 py-2" type="number" min="1" placeholder="–¶–µ–Ω–∞ (üíã)" @bind="EditPrice" />
                    <input class="rounded border px-3 py-2 w-24" placeholder="Emoji" @bind="EditEmoji" />
                    <div class="flex gap-2">
                        <button class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded font-bold" @onclick="SaveEdit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        <button class="bg-gray-200 px-4 py-2 rounded font-bold" @onclick="() => EditItemLocal = null">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </div>
            }
        }
    </div>
</div>