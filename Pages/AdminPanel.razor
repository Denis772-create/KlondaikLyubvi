@page "/admin"
@inject HttpClient Http
@inject IJSRuntime JS
@code {
    class UserDto { public int Id { get; set; } public string UserName { get; set; } = string.Empty; public int LovePoints { get; set; } }
    List<UserDto> Users = new();
    int SelectedUserId;
    int Amount;
    string? Message;
    protected override async Task OnInitializedAsync() {
        Users = await Http.GetFromJsonAsync<List<UserDto>>("/api/users") ?? new();
        var userIdStr = await JS.InvokeAsync<string>("blazorGetCookie", "userId");
        int.TryParse(userIdStr, out int UserId); // Changed to int.TryParse
    }
    async Task AddPoints() {
        var resp = await Http.PostAsJsonAsync($"/api/admin/addpoints", new { UserId = SelectedUserId, Amount });
        if (resp.IsSuccessStatusCode) { Message = "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!"; await RefreshUsers(); } else { Message = "–û—à–∏–±–∫–∞!"; }
    }
    async Task SubtractPoints() {
        var resp = await Http.PostAsJsonAsync($"/api/admin/subtractpoints", new { UserId = SelectedUserId, Amount });
        if (resp.IsSuccessStatusCode) { Message = "–ë–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω!"; await RefreshUsers(); } else { Message = "–û—à–∏–±–∫–∞!"; }
    }
    async Task RefreshUsers() {
        Users = await Http.GetFromJsonAsync<List<UserDto>>("/api/users") ?? new();
    }
}
<div class="max-w-xl mx-auto bg-white/80 rounded-2xl shadow-2xl p-8 mt-10">
    <h1 class="text-2xl font-bold text-pink-700 mb-6 flex items-center gap-2"><span class="text-3xl">üõ†Ô∏è</span> –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
    <div class="mb-4">
        <label class="block mb-1 font-semibold">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</label>
        <select class="w-full rounded border px-3 py-2" @bind="SelectedUserId">
            <option value="0">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</option>
            @foreach (var u in Users)
            {
                <option value="@u.Id">@u.UserName (@u.LovePoints üíã)</option>
            }
        </select>
    </div>
    <div class="mb-4 flex gap-2">
        <input type="number" class="rounded border px-3 py-2 w-32" @bind="Amount" placeholder="–°—É–º–º–∞" />
        <button class="bg-green-500 text-white px-4 py-2 rounded" @onclick="AddPoints">+ –ù–∞—á–∏—Å–ª–∏—Ç—å</button>
        <button class="bg-red-500 text-white px-4 py-2 rounded" @onclick="SubtractPoints">- –°–ø–∏—Å–∞—Ç—å</button>
    </div>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="mb-2 text-center text-pink-600 font-bold">@Message</div>
    }
</div>