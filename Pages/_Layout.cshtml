@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Клондайк Любви</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="alternate icon" type="image/png" href="/favicon-32.png" sizes="32x32" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" sizes="180x180" />
    <meta name="theme-color" content="#fce7f3" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @@media (max-width: 640px) {
            #store-fab {
                top: auto !important;
                right: 16px !important;
                bottom: 96px !important; /* above bottom nav */
            }
        }
    </style>
    <script>
        // Early stub so the help button always does something, even if main tour script not yet ready
        if (!window.triggerOnboarding) {
            window.triggerOnboarding = function(){
                try {
                    const url = new URL(window.location.href);
                    url.searchParams.set('onb','1');
                    window.location.href = url.toString();
                } catch {
                    window.location.href = window.location.href + (window.location.href.includes('?') ? '&' : '?') + 'onb=1';
                }
            };
        }
        // Ultra-light simple tour fallback (no highlighting) — DOM-safe, runs after DOM is ready
        (function(){
            if (window.SimpleTour) return;
            function ensure(){
                let root = document.getElementById('st-overlay');
                if (root) return root;
                root = document.createElement('div');
                root.id = 'st-overlay';
                root.style.cssText = 'position:fixed;inset:0;z-index:9998;display:none;pointer-events:none;background:transparent;';
                const card = document.createElement('div');
                card.id = 'st-card';
                card.style.cssText = 'position:fixed;top:16px;right:16px;max-width:420px;width:min(92vw,420px);background:white;border-radius:14px;padding:12px 14px;box-shadow:0 10px 30px rgba(233,100,140,.35);border:1px solid #fecdd3;color:#4b5563;font-family:system-ui,-apple-system,Segoe UI,Roboto;pointer-events:auto;';
                card.innerHTML = '<div id="st-title" style="font-weight:800;color:#db2777;font-size:16px;margin-bottom:6px">Короткий тур</div>'+
                                  '<div id="st-text" style="font-size:14px;line-height:1.4;margin-bottom:12px"></div>'+
                                  '<div style="display:flex;gap:8px;justify-content:flex-end">'+
                                  '  <button id="st-skip" style="background:#f3f4f6;color:#6b7280;border:none;border-radius:10px;padding:8px 12px;font-weight:600">Пропустить</button>'+
                                  '  <button id="st-prev" style="background:#fee2e2;color:#ef4444;border:none;border-radius:10px;padding:8px 12px;font-weight:600;display:none">Назад</button>'+
                                  '  <button id="st-next" style="background:#ec4899;color:white;border:none;border-radius:10px;padding:8px 12px;font-weight:700">Далее</button>'+
                                  '</div>';
                root.appendChild(card);
                (document.body || document.documentElement).appendChild(root);
                return root;
            }
            const steps = [
                { path: '/', text: 'Добро пожаловать в «Кландайк Любви». Ниже — главное меню для переходов.' },
                { path: '/love', text: '💌 Признания: пишите тёплые слова с эмодзи, сохраняйте важные моменты.' },
                { path: '/store', text: '💋 Магазин любви: баланс поцелуев и романтические услуги. Покупайте или дарите.' },
                { path: '/gallery', text: '📸 Галерея: загружайте совместные фото, открывайте на весь экран.' },
                { path: '/calendar', text: '📅 Календарик любви: запланированные исполнения, приглашения и активные подарки.' },
                { path: '/invites', text: '🎟️ Приглашения: создавайте события, партнёр получит уведомление.' },
                { path: '/love', text: 'Готово! В любой момент нажмите «❔» слева внизу, чтобы повторить.' }
            ];
            const ST_STEP_KEY = 'st_step_v1';
            function handler(e){
                const el = e.target;
                if (!(el instanceof HTMLElement)) return;
                if (el.id === 'st-skip') api.stop();
                if (el.id === 'st-prev') api.prev();
                if (el.id === 'st-next') { if (api.idx === steps.length-1) api.stop(); else api.next(); }
            }
            const api = {
                idx: 0,
                start(){
                    const root = ensure();
                    root.style.display = 'block';
                    root.removeEventListener('click', handler);
                    root.addEventListener('click', handler);
                    const saved = parseInt(sessionStorage.getItem(ST_STEP_KEY) || '0', 10) || 0;
                    api.idx = saved;
                    render();
                },
                next(){ api.idx++; if (api.idx >= steps.length) { api.stop(); return; } sessionStorage.setItem(ST_STEP_KEY, String(api.idx)); goIfNeeded(); render(); },
                prev(){ if (api.idx>0){ api.idx--; sessionStorage.setItem(ST_STEP_KEY, String(api.idx)); goIfNeeded(); render(); } },
                stop(){ const r = document.getElementById('st-overlay'); if (r) r.style.display='none'; try { sessionStorage.removeItem(ST_STEP_KEY); } catch {} }
            };
            function goIfNeeded(){
                const step = steps[api.idx];
                try {
                    if (window.location.pathname !== step.path){
                        const link = document.querySelector(`a[href='${step.path}']`);
                        if (link) link.click();
                        else window.location.href = step.path + window.location.search;
                    }
                } catch {}
            }
            function render(){
                const root = ensure();
                const t = document.getElementById('st-text');
                const prev = document.getElementById('st-prev');
                const next = document.getElementById('st-next');
                t.textContent = steps[api.idx].text;
                prev.style.display = api.idx>0 ? 'inline-block' : 'none';
                next.textContent = api.idx === steps.length-1 ? 'Закрыть' : 'Далее';
            }
            window.SimpleTour = api;
            // Start simple tour automatically for ?onb=1 when main tour is not ready; or explicitly via ?simple=1
            try {
                const url = new URL(window.location.href);
                const shouldSimple = url.searchParams.get('simple') === '1' || url.searchParams.get('onb') === '1';
                if (shouldSimple) {
                    const startFallback = () => window.SimpleTour.start();
                    if (document.readyState === 'complete' || document.readyState === 'interactive') setTimeout(startFallback, 300);
                    else window.addEventListener('DOMContentLoaded', () => setTimeout(startFallback, 300));
                }
            } catch {}
        })();
        // If URL already has ?onb=1, poll for main Onboarding API and start as soon as it's ready
        (function(){
            try {
                const url = new URL(window.location.href);
                if (url.searchParams.get('onb') === '1') {
                    let tries = 0;
                    const int = setInterval(() => {
                        if (window.Onboarding && typeof window.Onboarding.start === 'function') {
                            clearInterval(int);
                            try { url.searchParams.delete('onb'); history.replaceState(null, '', url.toString()); } catch {}
                            window.Onboarding.start(true);
                        } else if (++tries > 120) {
                            clearInterval(int);
                        }
                    }, 100);
                }
            } catch {}
        })();
    </script>
</head>
<body class="bg-pink-50 min-h-screen pb-20">
    <div id="app">
        @RenderBody()
        <button id="admin-fab" style="display:none;position:fixed;top:24px;right:24px;z-index:1000;background:white;border-radius:50%;box-shadow:0 2px 8px #eab; width:56px;height:56px;align-items:center;justify-content:center;border:none;outline:none;" onclick="location.href='/admin'">
            <span style="font-size:2rem;color:#d9468f;">🛠️</span>
        </button>
        <button id="store-fab" style="position:fixed;top:24px;right:90px;z-index:1000;background:white;border-radius:50%;box-shadow:0 2px 8px #eab; width:56px;height:56px;align-items:center;justify-content:center;border:none;outline:none;" onclick="location.href='/storepanel'">
            <span style="font-size:2rem;color:#d9468f;">🛒</span>
        </button>
    </div>
    <nav id="main-nav" class="fixed bottom-4 left-1/2 -translate-x-1/2 z-50 flex gap-4 bg-white/80 backdrop-blur-md shadow-lg rounded-full px-6 py-2 border border-pink-200">
        <a href="/" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">🏠</span>
        </a>
        <a href="/love" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">💌</span>
        </a>
        <a href="/store" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">💋</span>
        </a>
        <a href="/gallery" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">📸</span>
        </a>
        <a href="/calendar" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">📅</span>
        </a>
        <a href="/invites" class="flex flex-col items-center text-pink-500 hover:text-pink-700 transition">
            <span class="text-2xl">🎟️</span>
        </a>
    </nav>
    
    <script src="_framework/blazor.server.js"></script>
    <script>
        window.blazorGetCookie = function (name) {
            let match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
            return match ? match[2] : '';
        }
        window.blazorSetCookie = function (name, value, days) {
            let expires = '';
            if (days) {
                let date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = '; expires=' + date.toUTCString();
            }
            document.cookie = name + '=' + value + expires + '; path=/';
        }
        function updateNavVisibility() {
            const nav = document.getElementById('main-nav');
            const userId = blazorGetCookie('userId');
            if (!nav) return;
            if (window.location.pathname === '/' || window.location.pathname === '/login') {
                nav.style.display = 'none';
            } else {
                nav.style.display = '';
            }
            // Управление: только для Дениса
            const adminFab = document.getElementById('admin-fab');
            if (adminFab) {
                adminFab.style.display = (userId === '1') ? '' : 'none';
            }
            // Управление магазином: только на странице /store
            const storeFab = document.getElementById('store-fab');
            if (storeFab) {
                storeFab.style.display = (window.location.pathname === '/store') ? '' : 'none';
            }
        }
        updateNavVisibility();
        // Для Blazor: отслеживаем изменения URL через MutationObserver
        const app = document.getElementById('app');
        const observer = new MutationObserver(() => setTimeout(updateNavVisibility, 10));
        observer.observe(app, { childList: true, subtree: true });
        window.addEventListener('popstate', updateNavVisibility);
        document.addEventListener('click', function(e) {
            if (e.target.tagName === 'A' && e.target.href) {
                setTimeout(updateNavVisibility, 50);
            }
        });

        window.registerClickOutside = function (element, dotnetRef) {
            function onDocClick(e) {
                if (!element) return;
                const target = e.target;
                const clickedInside = element.contains(target);
                if (!clickedInside) {
                    // вызвать .NET метод, чтобы закрыть пикер
                    dotnetRef.invokeMethodAsync('CloseEmojiPicker');
                }
            }
            document.addEventListener('mousedown', onDocClick);
        }
        const _outsideHandlers = new Map();
        window.registerClickOutsideById = function (elementId, dotnetRef) {
            const handler = function (e) {
                const el = document.getElementById(elementId);
                if (!el) return;
                if (!el.contains(e.target)) {
                    dotnetRef.invokeMethodAsync('CloseEmojiPicker');
                }
            };
            _outsideHandlers.set(elementId, handler);
            setTimeout(() => document.addEventListener('mousedown', handler), 0);
        }
        window.unregisterClickOutsideById = function (elementId) {
            const handler = _outsideHandlers.get(elementId);
            if (handler) {
                document.removeEventListener('mousedown', handler);
                _outsideHandlers.delete(elementId);
            }
        }

        // Простая загрузка файлов галереи через FormData и fetch
        window.uploadGalleryFiles = async function() {
            const input = document.querySelector('input[type=file][multiple]');
            if (!input || !input.files || input.files.length === 0) return;
            const form = new FormData();
            for (const f of input.files) form.append('files', f);
            await fetch('/api/photos', { method: 'POST', body: form });
            input.value = '';
        }

        window.focusById = function(id){
            const el = document.getElementById(id);
            if (el) el.focus();
        }
        window.getLocal = function(key){ try { return localStorage.getItem(key) || ''; } catch { return ''; } }
        window.setLocal = function(key, value){ try { localStorage.setItem(key, value); } catch {} }

        
    </script>
</body>
</html>
